; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\PC-SECSTATS.C"
	.assume ADL=1
	SEGMENT TEXT
_hex_enc:
	DB	48
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	65
	DB	66
	DB	67
	DB	68
	DB	69
	DB	70
	DB	0
_round_combinator:
	DB	58
	DB	72
	DB	155
	DB	149
	DB	215
	DB	214
	DB	250
	DB	106
	DB	38
	DB	113
	DB	192
	DB	130
	DB	50
	DB	222
	DB	60
	DB	244
	DB	223
	DB	210
_pbox_enc:
	DB	4
	DB	7
	DB	15
	DB	6
	DB	14
	DB	8
	DB	2
	DB	0
	DB	12
	DB	1
	DB	11
	DB	3
	DB	10
	DB	5
	DB	13
	DB	9
_pbox_dec:
	DB	7
	DB	9
	DB	6
	DB	11
	DB	0
	DB	13
	DB	3
	DB	1
	DB	5
	DB	15
	DB	12
	DB	10
	DB	8
	DB	14
	DB	4
	DB	2
	SEGMENT CODE
_round_enc_sub:
	LD	HL,-15
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_2
L_0:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	B,(IX+-3)
	ADD	A,B
	LD	HL,(IX+-15)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,5
	CALL	__ishrs_b
	LD	IY,(IX+-15)
	LD	A,(IY)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	B,A
	LD	A,L
	XOR	A,B
	LD	HL,(IX+-12)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-12)
	XOR	A,(HL)
	LD	HL,(IX+-9)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	ADD	A,255
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-3)
	LD	BC,_round_combinator
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-6)
	XOR	A,(HL)
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_2:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_sub ***************************
;Name                         Addr/Register   Size   Type
;_round_combinator                   STATIC     18   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_sub:
	LD	HL,-15
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_6
L_4:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	HL,(IX+-3)
	LD	BC,_round_combinator
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	XOR	A,(HL)
	LD	HL,(IX+-15)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	HL,(IX+-15)
	LD	A,(HL)
	SUB	A,255
	LD	HL,(IX+-12)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(HL)
	LD	HL,(IX+-12)
	XOR	A,(HL)
	LD	HL,(IX+-9)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	A,3
	CALL	__ishrs_b
	LD	IY,(IX+-9)
	LD	A,(IY)
	LD	B,5
	CALL	__bshl
	LD	B,A
	LD	A,L
	XOR	A,B
	LD	HL,(IX+-6)
	LD	(HL),A
	LD	IY,(IX+-6)
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IY)
	LD	B,(IX+-3)
	SUB	A,B
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_6:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_4
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_sub ***************************
;Name                         Addr/Register   Size   Type
;_round_combinator                   STATIC     18   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 27 (bytes)
;       Spill Code: 0 (instruction)


_round_mix:
	LD	HL,-7
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_10
L_8:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-4),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-5),A
	LD	A,(IX+-4)
	AND	A,170
	LD	C,A
	LD	A,(IX+-5)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-6),A
	LD	A,(IX+-5)
	AND	A,170
	LD	C,A
	LD	A,(IX+-4)
	AND	A,85
	LD	B,A
	LD	A,C
	OR	A,B
	LD	(IX+-7),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-6)
	LD	(HL),A
	LD	HL,(IX+-3)
	INC	HL
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IX+-7)
	LD	(HL),A
	LD	IY,(IX+-3)
	LEA	IY,IY+2
	LD	(IX+-3),IY
L_10:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_8
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_mix ***************************
;Name                         Addr/Register   Size   Type
;e                                     IX-7      1   variable
;d                                     IX-6      1   variable
;c                                     IX-5      1   variable
;b                                     IX-4      1   variable
;a                                     IX-3      3   variable
;tmp                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 19 (bytes)
;       Spill Code: 0 (instruction)


_round_enc_per:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_14
L_12:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_14:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_12
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_17
L_15:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_pbox_enc
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_17:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_15
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_enc                           STATIC     16   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_dec_per:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_22
L_20:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+12)
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_22:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_20
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_25
L_23:
	LD	BC,(IX+-3)
	LD	HL,(IX+12)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,_pbox_dec
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_25:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_23
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec_per ***************************
;Name                         Addr/Register   Size   Type
;_pbox_dec                           STATIC     16   variable
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_round_enc:
	CALL	__frameset0
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_sub
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_enc ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_round_dec:
	CALL	__frameset0
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_mix
	POP	BC
	POP	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_per
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec_sub
	POP	BC
	POP	BC
	LD	SP,IX
	POP	IX
	RET	


;**************************** _round_dec ***************************
;Name                         Addr/Register   Size   Type
;tmp                                  IX+12      3   parameter
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


_enc:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_32
L_30:
	LD	BC,(IX+12)
	PUSH	BC
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_32:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_30
	LD	SP,IX
	POP	IX
	RET	


;**************************** _enc ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_dec:
	LD	HL,-3
	CALL	__frameset
	LD	BC,32
	LD	(IX+-3),BC
	JR	L_36
L_34:
	LD	BC,(IX+12)
	PUSH	BC
	LD	IY,(IX+-3)
	LEA	HL,IY+-1
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_round_dec
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LEA	IY,IY+-1
	LD	(IX+-3),IY
L_36:
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_34
	LD	SP,IX
	POP	IX
	RET	


;**************************** _dec ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;tmp                                  IX+12      3   parameter
;exp_key                               IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_expand_key:
	LD	HL,-24
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_40
L_38:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IX+-3)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_40:
	LD	BC,512
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_38
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_46
L_44:
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_43
L_41:
	LD	HL,(IX+-3)
	LD	A,21
	CALL	__imul_b
	LD	BC,(IX+-6)
	CALL	__ixor
	LD	A,L
	AND	A,15
	UEXT	HL
	LD	L,A
	LD	BC,(IX+6)
	LD	DE,(IX+-6)
	LD	(IX+-9),DE	; spill
	LD	DE,(IX+9)
	LD	(IX+-12),DE	; spill
	LD	DE,(IX+-9)	; unspill
	LD	(IX+-15),DE	; spill
	LD	DE,(IX+-6)
	LD	(IX+-18),DE	; spill
	LD	DE,(IX+-15)	; unspill
	LD	(IX+-21),DE	; spill
	LD	DE,(IX+9)
	LD	(IX+-24),DE	; spill
	LD	DE,(IX+-21)	; unspill
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	A,(IY)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,(IX+-12)	; unspill
	ADD	HL,DE
	XOR	A,(HL)
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,(IX+-18)	; unspill
	ADD	HL,DE
	LD	DE,(IX+-24)	; unspill
	ADD	HL,DE
	LD	(HL),A
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_43:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_41
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_46:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_44
	LD	SP,IX
	POP	IX
	RET	


;**************************** _expand_key ***************************
;Name                         Addr/Register   Size   Type
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;exp_key                               IX+9      3   parameter
;key                                   IX+6      3   parameter


; Stack Frame Size: 36 (bytes)
;       Spill Code: 0 (instruction)


_encrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_enc
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_51
L_49:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_51:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_49
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_57
L_55:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_54
L_52:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_54:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_52
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_57:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_55
	LD	SP,IX
	POP	IX
	RET	


;**************************** _encrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_decrypt:
	LD	HL,-534
	CALL	__frameset
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_expand_key
	POP	BC
	POP	BC
	PEA	IX+-22
	LD	HL,IX
	LD	BC,-534
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_dec
	POP	BC
	POP	BC
	POP	BC
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_62
L_60:
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_62:
	LD	BC,32
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_60
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_68
L_66:
	LD	BC,(IX+-3)
	LEA	HL,IX+-22
	ADD	HL,BC
	LD	(HL),0
	LD	BC,0
	LD	(IX+-6),BC
	JR	L_65
L_63:
	LD	HL,(IX+-6)
	LD	BC,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,IX
	LD	DE,-534
	ADD	HL,DE
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-6)
	INC	BC
	LD	(IX+-6),BC
L_65:
	LD	BC,32
	LD	HL,(IX+-6)
	OR	A,A
	SBC	HL,BC
	JR	C,L_63
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_68:
	LD	BC,16
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_66
	LD	SP,IX
	POP	IX
	RET	


;**************************** _decrypt ***************************
;Name                         Addr/Register   Size   Type
;exp_key                             IX-534    512   variable
;tmp                                  IX-22     16   variable
;b                                     IX-6      3   variable
;a                                     IX-3      3   variable
;key                                   IX+9      3   parameter
;msg                                   IX+6      3   parameter


; Stack Frame Size: 546 (bytes)
;       Spill Code: 0 (instruction)


_hex_to_int:
	LD	HL,-3
	CALL	__frameset
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	DEC	HL
	DEC	HL
	DEC	HL
	LD	(IX+-2),L
	LD	A,(IX+6)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	(IX+-3),L
	LD	B,10
	LD	C,(IX+-2)
	MLT	BC
	LD	A,C
	ADD	A,(IX+-3)
	LD	(IX+-1),A
	LD	A,9
	CP	A,(IX+-1)
	JR	NC,L_73
	DEC	(IX+-1)
L_73:
	LD	A,(IX+-1)
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hex_to_int ***************************
;Name                         Addr/Register   Size   Type
;second                                IX-3      1   variable
;first                                 IX-2      1   variable
;result                                IX-1      1   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


_to_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_77
L_75:
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__idivs
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	LD	BC,16
	CALL	__irems
	LD	BC,_hex_enc
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	A,(IY)
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	LD	HL,(IX+9)
	INC	BC
	INC	BC
	ADD	HL,BC
	LD	(HL),0
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_77:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_75
	LD	SP,IX
	POP	IX
	RET	


;**************************** _to_hex ***************************
;Name                         Addr/Register   Size   Type
;_hex_enc                            STATIC     17   variable
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_from_hex:
	LD	HL,-3
	CALL	__frameset
	LD	BC,0
	LD	(IX+-3),BC
	JR	L_81
L_79:
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	(HL),A
	LD	HL,(IX+-3)
	ADD	HL,HL
	LD	BC,HL
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	C,(HL)
	LD	B,0
	PUSH	BC
	CALL	_hex_to_int
	POP	BC
	LD	BC,(IX+-3)
	LD	HL,(IX+9)
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+9)
	LD	BC,(IX+-3)
	ADD	HL,BC
	ADD	A,(IY)
	LD	(HL),A
	LD	BC,(IX+-3)
	INC	BC
	LD	(IX+-3),BC
L_81:
	LD	BC,(IX+12)
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	C,L_79
	LD	SP,IX
	POP	IX
	RET	


;**************************** _from_hex ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-3      3   variable
;size                                 IX+12      3   parameter
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


_hash_key:
	CALL	__frameset0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _hash_key ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


_nop:
;    1	#include "psec-crypt.h"
;    2	#ifdef LX_BUILD
;    3	#ifdef OP_TEST
;    4	#include <sys/time.h>
;    5	#endif
;    6	
;    7	#ifdef OP_TEST
;    8	#define TEST_ITERS 100000
;    9	
;   10	double timediff(struct timeval x , struct timeval y)
;   11	{
;   12		double x_ms , y_ms , diff;
;   13		
;   14		x_ms = (double)x.tv_sec*1000000 + (double)x.tv_usec;
;   15		y_ms = (double)y.tv_sec*1000000 + (double)y.tv_usec;
;   16		
;   17		diff = (double)y_ms - (double)x_ms;
;   18		
;   19		return diff;
;   20	}
;   21	#endif
;   22	
;   23	#ifndef BUILD_LIB
;   24	int main(void)
;   25	{
;   26			/* initialize working buffers */
;   27			unsigned char msg[MSG_SIZE];
;   28			unsigned char key[KEY_SIZE];
;   29			unsigned char exp_key[EXP_KEY_SIZE];
;   30			unsigned char exp_key_hex[EXP_KEY_SIZE * 2 + 2];
;   31	
;   32			unsigned char msg_in[MSG_SIZE * 2 + 1]; // for hex input
;   33			unsigned char key_in[KEY_SIZE * 2 + 1]; // for hex input
;   34			unsigned char choice[16];
;   35	
;   36			//unsigned char exp_key[BLK_SIZE * ROUNDS];
;   37			unsigned char response[MSG_SIZE * 2 + 2];
;   38			unsigned char hex[MSG_SIZE * 2 + 2];
;   39			size_t a;
;   40			size_t b;
;   41			#ifdef OP_TEST
;   42			unsigned char exp_key[EXP_KEY_SIZE];
;   43			unsigned char tmp[MSG_SIZE];
;   44			struct timeval start, end;
;   45			#endif
;   46			
;   47			//msg = "Hello";
;   48			//key = "world";
;   49		//	fgets(msg, MSG_SIZE, STDIN);
;   50		//	fgets(key, KEY_SIZE, STDIN);
;   51		/*
;   52			printf("Msg: ");
;   53			gets(msg_in);
;   54			printf("Key: ");
;   55			gets(key_in);
;   56			printf("E/D: ");
;   57			gets(choice);
;   58		*/
;   59	
;   60			/* Clear the homescreen */
;   61			os_ClrHome();
;   62			//           ("PARSEC Encryption123456789");
;   63			printf("PARSEC Statistics\n");
;   64			printf("--------------------------\n");
;   65			printf("%i-byte (128 bit) block\n", BLK_SIZE);
;   66			printf("%i-byte (256 bit) key\n", KEY_SIZE);
;   67			printf("%i rounds\n", ROUNDS);
;   68			printf("\n");
;   69	
;   70			for(a=0; a<MSG_SIZE * 2 + 2; ++a){
;   71				msg_in[a] = '0';
;   72			}
;   73			for(a=0; a<KEY_SIZE * 2 + 2; ++a){
;   74				key_in[a] = '0';
;   75			}
;   76			os_GetStringInput("Msg:", msg_in, MSG_SIZE * 2 + 2);
;   77			os_GetStringInput("Key:", key_in, KEY_SIZE * 2 + 2);
;   78			//           ("PARSEC Encryption123456789");
;   79	
;   80			//os_GetStringInput("Mode (E/D/H):", choice, 16);
;   81			
;   82			from_hex(msg_in, msg, MSG_SIZE);
;   83			from_hex(key_in, key, KEY_SIZE);
;   84			to_hex(msg, msg_in, MSG_SIZE);
;   85			to_hex(key, key_in, KEY_SIZE);
;   86			
;   87			expand_key(key, exp_key);
;   88			to_hex(exp_key, exp_key_hex, EXP_KEY_SIZE);
;   89			
;   90			printf("MSG         \t= %s\n", msg_in);
;   91			printf("KEY         \t= %s\n", key_in);
;   92			printf("EXPANDED KEY\t= %s\n", exp_key_hex);
;   93			
;   94			for(a=0; a<EXP_KEY_SIZE; a += BLK_SIZE){
;   95				to_hex(&exp_key[a], msg_in, BLK_SIZE);
;   96				printf("ROUND KEY %i\t= %s\n", a / BLK_SIZE, msg_in);
;   97			}
;   98			
;   99		return 0;
;  100	}
;  101	#endif
;  102	
;  103	#endif
;  104	// Nothing to do unless we're on Linux
	CALL	__frameset0
	LD	SP,IX
	POP	IX
	RET	


;**************************** _nop ***************************
;Name                         Addr/Register   Size   Type
;key                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF __idivs:ROM
	XREF __bshl:ROM
	XREF __irems:ROM
	XREF __ixor:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __imul_b:ROM
	XREF __ishrs_b:ROM
	XDEF _nop
	XDEF _hash_key
	XDEF _from_hex
	XDEF _to_hex
	XDEF _hex_to_int
	XDEF _decrypt
	XDEF _encrypt
	XDEF _expand_key
	XDEF _dec
	XDEF _enc
	XDEF _round_dec
	XDEF _round_enc
	XDEF _round_dec_per
	XDEF _round_enc_per
	XDEF _round_mix
	XDEF _round_dec_sub
	XDEF _round_enc_sub
	XDEF _pbox_dec
	XDEF _pbox_enc
	XDEF _round_combinator
	XDEF _hex_enc
	END
